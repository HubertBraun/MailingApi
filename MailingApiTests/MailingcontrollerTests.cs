using MailingApi.Controllers;
using MailingApi.Layers;
using MailingApi.Models;
using MailingApiTests.Helper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;

namespace MailingApiTests
{
    [TestClass]
    public class MailingcontrollerTests
    {
        private static MailingController _controller;
        private static BuisnessLayer _buisness;

        [ClassInitialize]
        public static void Initialize(TestContext _)
        {
            var options = new DbContextOptionsBuilder<MailingApiContext>().UseInMemoryDatabase(databaseName: "MailDatabase")
                .ConfigureWarnings(x => x.Ignore(InMemoryEventId.TransactionIgnoredWarning)).Options;
            var context = new MailingApiContext(options);
            _buisness = new BuisnessLayer(context);
            _controller = new MailingController(_buisness);
            
            var user = BuissnesTestHelper.CreateBuissnesModelUser("TestUser", "Password");
            var userId = _buisness.RegisterUser(user);
            var emails = new List<string> { "a@a.com", "b@b.com" };
            var model = BuissnesTestHelper.CreateBuissnessModelGroup(userId, "testName", emails);
            var model2 = BuissnesTestHelper.CreateBuissnessModelGroup(userId, "testName2", emails);
            var modelToDelete1 = BuissnesTestHelper.CreateBuissnessModelGroup(userId, "testNameToDelete1", emails);
            var modelToDelete2 = BuissnesTestHelper.CreateBuissnessModelGroup(userId, "testNameToDelete2", emails);
            _buisness.SaveBuissnesModelGroup(model);
            _buisness.SaveBuissnesModelGroup(model2);
            _buisness.SaveBuissnesModelGroup(modelToDelete1);
            _buisness.SaveBuissnesModelGroup(modelToDelete2);
        }

        #region Get
        [DataRow(-1)]
        [DataRow(10)]
        [DataRow(1)]
        [DataRow(2)]
        [TestMethod]
        public void GetGroupByIdShoulReturnUnauthorized(int groupId)
        {
            var expected = new UnauthorizedResult();
            var actual = _controller.GetGroupById(groupId) as UnauthorizedResult;
            Assert.AreEqual(expected.GetType(), actual.GetType());
            Assert.AreEqual(expected.StatusCode, actual.StatusCode);
        }

        [DataRow(-1)]
        [DataRow(10)]
        [TestMethod]
        public void GetGroupByIdShoulReturnNotFound(int groupId)
        {
            var expected = new NotFoundResult();
            var actual = _controller.GetGroupById(groupId) as NotFoundResult;
            Assert.AreEqual(expected.GetType(), actual.GetType());
            Assert.AreEqual(expected.StatusCode, actual.StatusCode);
        }
        [TestMethod]
        [DataRow(1)]
        [DataRow(2)]
        public void GetGroupByIdShoulReturnOK(int groupId)
        {
            var expectedGroup = _buisness.GetBuissnesModel(groupId);
            var actualGroup = (_controller.GetGroupById(groupId) as OkObjectResult).Value as BuissnessModelGroup;
            BuissnesTestHelper.CompareBuissnessModelGroup(expectedGroup, actualGroup);
        }
        #endregion
        #region Post
        [TestMethod]
        public void PostNewGroupShoulReturnUnauthorized()
        {
            var emails = new List<string> { "email1Created", "email2Created" };
            var group = BuissnesTestHelper.CreateBuissnessModelGroup(1, "CreatedName", emails);

            var expected = new UnauthorizedResult();
            var actual = _controller.PostNewGroup(group) as UnauthorizedResult;
            Assert.AreEqual(expected.GetType(), actual.GetType());
            Assert.AreEqual(expected.StatusCode, actual.StatusCode);
        }
        [TestMethod]
        public void PostNewGroupShoulReturnCreated()
        {
            var emails = new List<string> { "email1Created", "email2Created" };
            var expectedGroup = BuissnesTestHelper.CreateBuissnessModelGroup(1, "CreatedName", emails);

            var result = _controller.PostNewGroup(expectedGroup) as CreatedResult;
            var id = (int)result.Value;
            var actualGroup = _buisness.GetBuissnesModel(id);
            expectedGroup.Id = actualGroup.Id; // get generated by database Id
            BuissnesTestHelper.CompareBuissnessModelGroup(expectedGroup, actualGroup);
        }
        #endregion
        #region Put
        [TestMethod]
        public void PutShoulReturnCreated()
        {
        }

        [TestMethod]
        public void PutShoulReturnNotFound()
        {
        }

        [TestMethod]
        public void PutShoulReturnOK()
        {
        }
        #endregion
        #region Delete
        [DataRow(-1)]
        [DataRow(10)]
        [DataRow(3)]
        [DataRow(4)]
        [TestMethod]
        public void DeleteGroupShoulReturnUnauthorized(int groupId)
        {
            var expected = new UnauthorizedResult();
            var actual = _controller.DeleteGroup(groupId) as UnauthorizedResult;
            Assert.AreEqual(expected.GetType(), actual.GetType());
            Assert.AreEqual(expected.StatusCode, actual.StatusCode);
        }

        [DataRow(-1)]
        [DataRow(10)]
        [TestMethod]
        public void DeleteGroupShoulReturnNotFound(int groupId)
        {
            var expected = new NotFoundResult();
            var actual = _controller.DeleteGroup(groupId) as NotFoundResult;
            Assert.AreEqual(expected.GetType(), actual.GetType());
            Assert.AreEqual(expected.StatusCode, actual.StatusCode);
        }

        [DataRow(3)]
        [DataRow(4)]
        [TestMethod]
        public void DeleteGroupShoulReturnOK(int groupId)
        {
            var expected = new OkResult();
            var actual = _controller.DeleteGroup(groupId) as OkResult;
            Assert.AreEqual(expected.GetType(), actual.GetType());
            Assert.AreEqual(expected.StatusCode, actual.StatusCode);
            Assert.IsNull(_buisness.GetBuissnesModel(groupId));
        }
        #endregion
    }
}
